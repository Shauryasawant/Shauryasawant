{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "OM-g6GxV2LL5"
      ],
      "authorship_tag": "ABX9TyOc98S/a7s4uSm+a4MMx66j",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Shauryasawant/Shauryasawant/blob/main/SE_Project\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install fuzzywuzzy"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tJTcwaCgbnlC",
        "outputId": "06972555-3777-4b9b-8364-d3e8b02999e7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting fuzzywuzzy\n",
            "  Downloading fuzzywuzzy-0.18.0-py2.py3-none-any.whl.metadata (4.9 kB)\n",
            "Downloading fuzzywuzzy-0.18.0-py2.py3-none-any.whl (18 kB)\n",
            "Installing collected packages: fuzzywuzzy\n",
            "Successfully installed fuzzywuzzy-0.18.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install python-Levenshtein"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yx-RgbC-brk3",
        "outputId": "a6c11354-b27e-411b-a388-f77f23dbbd6b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting python-Levenshtein\n",
            "  Downloading python_Levenshtein-0.26.1-py3-none-any.whl.metadata (3.7 kB)\n",
            "Collecting Levenshtein==0.26.1 (from python-Levenshtein)\n",
            "  Downloading levenshtein-0.26.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.2 kB)\n",
            "Collecting rapidfuzz<4.0.0,>=3.9.0 (from Levenshtein==0.26.1->python-Levenshtein)\n",
            "  Downloading rapidfuzz-3.10.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\n",
            "Downloading python_Levenshtein-0.26.1-py3-none-any.whl (9.4 kB)\n",
            "Downloading levenshtein-0.26.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (162 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m162.6/162.6 kB\u001b[0m \u001b[31m4.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading rapidfuzz-3.10.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.1 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.1/3.1 MB\u001b[0m \u001b[31m30.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: rapidfuzz, Levenshtein, python-Levenshtein\n",
            "Successfully installed Levenshtein-0.26.1 python-Levenshtein-0.26.1 rapidfuzz-3.10.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "import pandas as pd\n",
        "from geopy.distance import geodesic\n",
        "from google.colab import files\n",
        "import time\n",
        "from fuzzywuzzy import fuzz\n",
        "from datetime import datetime, timedelta\n",
        "\n",
        "API_KEY = 'Your_Google_Maps_API_Key'\n",
        "\n",
        "def get_place_details(place_id, api_key):\n",
        "    \"\"\"Get detailed place information including categories.\"\"\"\n",
        "    url = \"https://maps.gomaps.pro/maps/api/place/details/json\"\n",
        "    query_params = {\n",
        "        \"place_id\": place_id,\n",
        "        \"key\": api_key,\n",
        "        \"fields\": \"address_components,opening_hours,reviews,business_status,website,types\"  # Added types\n",
        "    }\n",
        "\n",
        "    try:\n",
        "        response = requests.get(url, params=query_params)\n",
        "        data = response.json()\n",
        "\n",
        "        if data.get('status') == 'OK':\n",
        "            result = data.get('result', {})\n",
        "            address_components = result.get('address_components', [])\n",
        "\n",
        "            state = None\n",
        "            county = None\n",
        "            city = None\n",
        "            postal_code = None\n",
        "\n",
        "            for component in address_components:\n",
        "                types = component.get('types', [])\n",
        "                if 'administrative_area_level_1' in types:\n",
        "                    state = component.get('short_name')\n",
        "                elif 'administrative_area_level_2' in types:\n",
        "                    county = component.get('long_name')\n",
        "                elif 'locality' in types:\n",
        "                    city = component.get('long_name')\n",
        "                elif 'postal_code' in types:\n",
        "                    postal_code = component.get('long_name')\n",
        "\n",
        "            return {\n",
        "                'state': state,\n",
        "                'county': county,\n",
        "                'city': city,\n",
        "                'postal_code': postal_code,\n",
        "                'business_status': result.get('business_status'),\n",
        "                'opening_hours': result.get('opening_hours', {}),\n",
        "                'reviews': result.get('reviews', []),\n",
        "                'website': result.get('website', ''),\n",
        "                'types': result.get('types', [])  # Added types to returned data\n",
        "            }\n",
        "\n",
        "    except Exception as e:\n",
        "        print(f\"Error getting place details: {str(e)}\")\n",
        "    return None\n",
        "\n",
        "def calculate_distances(api_key):\n",
        "    \"\"\"Process POIs and verify their locations.\"\"\"\n",
        "    print(\"Please upload your Excel file...\")\n",
        "    uploaded = files.upload()\n",
        "\n",
        "    for file_name in uploaded.keys():\n",
        "        file_path = file_name\n",
        "\n",
        "    df = pd.read_excel(file_path)\n",
        "\n",
        "    required_columns = [\n",
        "        'is_(or was) this a place ?',\n",
        "        'Address Match Score',\n",
        "        'Address Match Details',\n",
        "        'Is it Active/Open?',\n",
        "        'Official Website',\n",
        "        '3rd Party',\n",
        "        'Comment',\n",
        "        'Potential Matches (60% Similar)',\n",
        "        'Category Match Score',  # New column\n",
        "        'Category Match Details',  # New column\n",
        "        'Matched Category'  # New column to store Google category types\n",
        "    ]\n",
        "\n",
        "    for col in required_columns:\n",
        "        df[col] = None\n",
        "\n",
        "    for idx, row in df.iterrows():\n",
        "        poi_name = row['poi_nm']\n",
        "        original_category = row.get('cat_nm', '')  # Get original category\n",
        "        print(f\"\\nProcessing: {poi_name}\")\n",
        "\n",
        "        try:\n",
        "            lat_long = str(row['display_lat_long']).strip()\n",
        "            if ',' in lat_long:\n",
        "                origin_coords = tuple(map(float, lat_long.split(',')))\n",
        "            else:\n",
        "                origin_coords = tuple(map(float, lat_long.split()))\n",
        "        except Exception as e:\n",
        "            print(f\"Error parsing coordinates for '{poi_name}': {str(e)}\")\n",
        "            df.at[idx, 'Comment'] = \"Invalid Coordinates\"\n",
        "            continue\n",
        "\n",
        "        nearby_places = get_nearby_places(poi_name, origin_coords[0], origin_coords[1], api_key)\n",
        "\n",
        "        if nearby_places:\n",
        "            close_matches = []\n",
        "            potential_matches_60 = []\n",
        "\n",
        "            for place in nearby_places:\n",
        "                place_details = get_place_details(place['place_id'], api_key)\n",
        "                if place_details:\n",
        "                    name_match_score = calculate_match_score(poi_name, place['name'])\n",
        "\n",
        "                    # Get raw category types from Google\n",
        "                    google_types = place_details.get('types', [])\n",
        "                    matched_category = ', '.join(google_types)  # Store the exact Google categories\n",
        "\n",
        "                    # Optionally you can still compute category match score if needed\n",
        "                    # category_score, category_comment = check_category_match(original_category, google_types)\n",
        "\n",
        "                    address_score, address_comment = calculate_address_match_score(\n",
        "                        row['admin2'],\n",
        "                        row['admin4'],\n",
        "                        row['postal_code'],\n",
        "                        place_details\n",
        "                    )\n",
        "\n",
        "                    distance = geodesic(\n",
        "                        origin_coords,\n",
        "                        (place['geometry']['location']['lat'],\n",
        "                         place['geometry']['location']['lng'])\n",
        "                    ).meters\n",
        "\n",
        "                    if name_match_score >= 70:\n",
        "                        close_matches.append({\n",
        "                            'name': place['name'],\n",
        "                            'place_id': place['place_id'],\n",
        "                            'details': place_details,\n",
        "                            'distance': distance,\n",
        "                            'maps_link': create_google_maps_link(place_id=place['place_id']),\n",
        "                            'name_match_score': name_match_score,\n",
        "                            'address_score': address_score,\n",
        "                            'address_comment': address_comment,\n",
        "                            'matched_category': matched_category  # Save matched category\n",
        "                        })\n",
        "\n",
        "                    if name_match_score >= 60:\n",
        "                        potential_matches_60.append(f\"{place['name']} ({round(distance)}m)\")\n",
        "\n",
        "            if close_matches:\n",
        "                # Updated to consider category score in best match selection\n",
        "                best_match = max(close_matches,\n",
        "                               key=lambda x: (x['address_score'], x['name_match_score']))\n",
        "\n",
        "                df.at[idx, 'is_(or was) this a place ?'] = \"Y\" if best_match['address_score'] > 50 else \"Unsure\"\n",
        "                df.at[idx, 'Address Match Score'] = f\"{best_match['address_score']}%\"\n",
        "                df.at[idx, 'Address Match Details'] = best_match['address_comment']\n",
        "                df.at[idx, 'Is it Active/Open?'] = is_active(best_match['details'])\n",
        "                df.at[idx, 'Official Website'] = best_match['details'].get('website', '')\n",
        "                df.at[idx, '3rd Party'] = best_match['maps_link']\n",
        "                df.at[idx, 'Category Match Score'] = f\"{best_match.get('category_score', '0')}%\"\n",
        "                df.at[idx, 'Category Match Details'] = best_match.get('category_comment', 'No match')\n",
        "                df.at[idx, 'Matched Category'] = best_match['matched_category']  # Save the matched category in the new column\n",
        "                df.at[idx, 'Comment'] = (\n",
        "                    f\"Found: {best_match['name']} at {round(best_match['distance'])}m. \"\n",
        "                    f\"Name match: {best_match['name_match_score']}%, \"\n",
        "                    f\"Category match: {best_match.get('category_score', '0')}%\"\n",
        "                )\n",
        "                df.at[idx, 'Potential Matches (60% Similar)'] = ', '.join(potential_matches_60)\n",
        "\n",
        "                print(f\"Processed {poi_name}: Found match with address score {best_match['address_score']}%\")\n",
        "\n",
        "        else:\n",
        "            print(f\"No matches found for {poi_name}\")\n",
        "            df.at[idx, 'is_(or was) this a place ?'] = \"N\"\n",
        "            df.at[idx, 'Address Match Score'] = \"0%\"\n",
        "            df.at[idx, 'Address Match Details'] = \"No matches found\"\n",
        "            df.at[idx, 'Category Match Score'] = \"0%\"\n",
        "            df.at[idx, 'Category Match Details'] = \"No matches found\"\n",
        "            df.at[idx, 'Matched Category'] = \"No matches found\"  # Store the info in the new column\n",
        "            df.at[idx, 'Comment'] = \"No matches found\"\n",
        "            df.at[idx, 'Potential Matches (60% Similar)'] = \"None\"\n",
        "\n",
        "        time.sleep(1)\n",
        "\n",
        "    output_file = \"poi_verification_results.xlsx\"\n",
        "    df.to_excel(output_file, index=False)\n",
        "    print(f\"\\nResults saved to {output_file}\")\n",
        "    files.download(output_file)\n",
        "\n",
        "# Run the verification\n",
        "calculate_distances(API_KEY)\n"
      ],
      "metadata": {
        "id": "-W7XNSVb_nNp",
        "outputId": "4c637ee0-5b7e-4761-ac50-a09487c3b9c9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 181
        }
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Please upload your Excel file...\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-abab6456-11b8-4cb6-a3d0-b67fcd656405\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-abab6456-11b8-4cb6-a3d0-b67fcd656405\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving testcase2.xlsx to testcase2 (4).xlsx\n",
            "\n",
            "Processing: CVS PHARMACY 4747\n",
            "Processed CVS PHARMACY 4747: Found match with address score 100.0%\n",
            "\n",
            "Results saved to poi_verification_results.xlsx\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_f4bd6257-b2ed-495b-af13-d47859b80572\", \"poi_verification_results.xlsx\", 5561)"
            ]
          },
          "metadata": {}
        }
      ]
    }
  ]
}